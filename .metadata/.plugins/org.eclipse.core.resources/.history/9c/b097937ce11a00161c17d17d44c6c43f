Class Node:
def __init__(self, k, val):
    self.key = k
    self.value = val
    self.left = None
    self.right = None
and other function definitions for the tree max and min values as

def tree_max(node):
    maxleft  = float('-inf') if not node.left  else tree_max(node.left)
    maxright = float('-inf') if not node.right else tree_max(node.right)
    return max(node.value, maxleft, maxright)

def tree_min(node):
    minleft  = float('-inf') if not node.right else tree_min(node.left)
    minright = float('-inf') if not node.left else tree_min(node.right)
    return min(node.value, minleft, minright)
My verification method as

def verify(node):
    if tree_max(node.left) <= node.value and node.value <= tree_min(node.right):
       if verify(node.left) and verify(node.right):
           return True
       else:
           return False
    else:
        return False
My problem occurs when I try to implement the verification method I seem to always get false even when I try to make a BST tree. My implementation is as follows:

root= Node(10, "Hello")
root.left = Node(15, "Fifteen")
root.right= Node(30, "Thirty")

print verify(root)

root = Node(10, "Ten")
root.right = Node(20, "Twenty")
root.left = Node(5, "Five")
root.left.right = Node(15, "Fifteen")

print verify(root)
Both are giving me False...Is there a problem with my verification function or my min/max function...Any help would be appreciated.

python binary-search-tree
shareimprove this question
edited Feb 14 '13 at 21:24

Bakuriu
39.1k665100
asked Feb 14 '13 at 18:51

koala421
8318
           
Should the tree be balanced or not? Because usually BST = Binary search tree and not Balanced search tree. Your algorithm doesn't seem to check if the tree is balanced... – Bakuriu Feb 14 '13 at 21:22 
           
I think the problem is related to the fact that node.value is a string and you are using float('-inf') as sentinel. – Bakuriu Feb 14 '13 at 21:38
add a comment
1 Answer
active oldest votes
up vote
5
down vote
accepted
I see four errors in your code.

First, your check for null children is backwards in tree_min. That is, you're checking if node.right exists before accessing node.left, and vise versa.
Second, tree.min returns negative infinity when called on a leaf node. You need to use positive infinity in the min calculation (negative infinity is correct in the max version).
Third, you have a logic error within verify, as it unconditionally calls tree_min or tree_max and itself on it's child nodes, even if one or both of them are None. I suggest making all the functions handle being passed None, rather than relying on the caller to do the right thing. This also simplifies the min and max code a bit!
Lastly, you're doing your comparisons on node.value, which is the string you're giving each node. I suspect you want to be comparing using node.key instead. Comparing a float (like float("-inf")) to a string (like "ten") is an error in Python 3, and even in Python 2 where it is legal, it probably doesn't work like you would expect.
With those issues fixed, I get expected results when I create valid and invalid trees. Your two examples are both invalid though, so if you were using them to test, you will always get a False result.

Finally, a couple of minor style issues (that aren't bugs, but still things that could be improved). Python supports chained comparisons, so you can simplify your first if statement in verify to tree_max(node.left) <= node.key <= tree_min(node.right). You can further simplify that part of the code by connecting the checks with and rather than nesting an additional if statement.

Here's a version of your code that works for me (using Python 3, though I think it is all backwards compatible to Python 2):

class Node:
    def __init__(self, k, val):
        self.key = k
        self.value = val
        self.left = None
        self.right = None

def tree_max(node):
    if not node:
        return float("-inf")
    maxleft  = tree_max(node.left)
    maxright = tree_max(node.right)
    return max(node.key, maxleft, maxright)

def tree_min(node):
    if not node:
        return float("inf")
    minleft  = tree_min(node.left)
    minright = tree_min(node.right)
    return min(node.key, minleft, minright)

def verify(node):
    if not node:
        return True
    if (tree_max(node.left) <= node.key <= tree_min(node.right) and
        verify(node.left) and verify(node.right)):
        return True
    else:
        return False

root= Node(10, "Hello")
root.left = Node(5, "Five")
root.right= Node(30, "Thirty")

print(verify(root)) # prints True, since this tree is valid

root = Node(10, "Ten")
root.right = Node(20, "Twenty")
root.left = Node(5, "Five")
root.left.right = Node(15, "Fifteen")

print(verify(root)) # prints False, since 15 is to the left of 10
shareimprove this answer
answered Feb 14 '13 at 21:54

Blckknght
35.6k42258
           
Thank You very much...Great explanation. – koala421 Feb 19 '13 at 18:58
add a comment
Your Answer


 
Sign up or log in

Sign up using Google
Sign up using Facebook
Sign up using Email and Password
Post as a guest

Name

Email

required, but never shown
 Post Your Answer
By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for?    Browse other questions tagged python binary-search-tree or ask your own question.

asked

3 years ago

viewed

2791 times

active

3 years ago


Related

2391
How to check whether a file exists using Python?
2885
What is a metaclass in Python?
4846
What does the yield keyword do in Python?
3
Is there any standard Binary search tree implementation in python
5
Best practise for creating BST : python
-1
how to calculate the height of a BST in python
0
problems with BST in python
1
BST problems in python
0
Binary search tree insertion Python
2
Using generators to perform an inorder tree traversal on a BST
Hot Network Questions

Is it possible to make the variable inside nested for loop local
What does “in the rearview mirror” mean in this context?
Limit using L’Hôpital
Claims of mathematical breakthroughs while in an altered state of consciousness in general?
How do laser "tape measures" work?
What happens if a math PhD student fails to find a proof that is the main objective of his/her thesis topic?
Why are There No "Triernions"?
Can I use fabricate to turn gold coins into ingots worth three times as much gold?
Putting grid behind the figure
Deck of cards design
How can I help my direct report to understand he is not being micromanaged?
Future or past, depending on the country
How can I close a big hole in a mesh?
How much should a new graduate with new job put towards a car?
Why Java is not so popular in software development startup projects?
Contaminated Squares
What is this spring between the fork and the frame?
What is the term for a language that is a second language for most people?
Where does electricity go after being used?
To be on, at or by someone's side
I overstayed in US for over 9 years. When can I apply for a visa again?
Some examples of clean topological spaces
Clapping / applause when a planes lands?
"You've earned the 'Nice Answer' badge" vs. "You've earned a 'Nice Answer' badge"
question feed
about us tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback
TECHNOLOGY    LIFE / ARTS    CULTURE / RECREATION    SCIENCE    OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
ExpressionEngine® Answers
more (13)
Photography
Science Fiction & Fantasy
Graphic Design
Movies & TV
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
more (9)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
Arqade (gaming)
Bicycles
Role-playing Games
more (21)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
MathOverflow
Chemistry
Biology
more (5)
Stack Apps
Meta Stack Exchange
Area 51
Stack Overflow Careers
site design / logo © 2016 Stack Exchange Inc; user contributions licensed under cc by-sa 3.0 with attribution required
rev 2016.5.13.3573