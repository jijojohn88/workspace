class node:
    def __init__(self,d,left=None,right=None):
        self.data=d
        self.left=left
        self.right=right

def partition(ar):
    if(ar == None or len(ar) <1) :
        return None;
    root = node(ar[len(ar)//2])
    root.left = partition(ar[:len(ar)//2])
    root.right= partition(ar[len(ar)//2+1:])
    return root

def inOrderTraversal(root):
    if(root == None):
        return;
    print(root.data,end=',')
    inOrderTraversal(root.left)
    inOrderTraversal(root.right)
    
def levelOrderTraversal(root):
    if(root == None ):
        return
    thisLevel=[root]
    while thisLevel:
        newLevel=list()
        for n in thisLevel:
            print (n.data,end=',')
            if n.left : newLevel.append(n.left)
            if n.right: newLevel.append(n.right)
    print()
    thisLevel=newLevel

ar=[3,2,1,4,6,5,8,7,9]
ar.sort();
root=partition(ar)
print("\nInorder Traversal")
inOrderTraversal(root)
print("\nLevelOrder Traversal")
#levelOrderTraversal(root)
